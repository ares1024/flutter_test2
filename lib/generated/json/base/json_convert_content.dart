// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_test2/model/user_entity.dart';
import 'package:flutter_test2/generated/json/user_entity_helper.dart';
import 'package:flutter_test2/model/photo_entity.dart';
import 'package:flutter_test2/generated/json/photo_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case UserEntity:
				return userEntityFromJson(data as UserEntity, json) as T;
			case UserAddress:
				return userAddressFromJson(data as UserAddress, json) as T;
			case UserAddressGeo:
				return userAddressGeoFromJson(data as UserAddressGeo, json) as T;
			case UserCompany:
				return userCompanyFromJson(data as UserCompany, json) as T;
			case PhotoEntity:
				return photoEntityFromJson(data as PhotoEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case UserEntity:
				return userEntityToJson(data as UserEntity);
			case UserAddress:
				return userAddressToJson(data as UserAddress);
			case UserAddressGeo:
				return userAddressGeoToJson(data as UserAddressGeo);
			case UserCompany:
				return userCompanyToJson(data as UserCompany);
			case PhotoEntity:
				return photoEntityToJson(data as PhotoEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (UserEntity).toString()){
			return UserEntity().fromJson(json);
		}
		if(type == (UserAddress).toString()){
			return UserAddress().fromJson(json);
		}
		if(type == (UserAddressGeo).toString()){
			return UserAddressGeo().fromJson(json);
		}
		if(type == (UserCompany).toString()){
			return UserCompany().fromJson(json);
		}
		if(type == (PhotoEntity).toString()){
			return PhotoEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<UserEntity>[] is M){
			return data.map<UserEntity>((e) => UserEntity().fromJson(e)).toList() as M;
		}
		if(<UserAddress>[] is M){
			return data.map<UserAddress>((e) => UserAddress().fromJson(e)).toList() as M;
		}
		if(<UserAddressGeo>[] is M){
			return data.map<UserAddressGeo>((e) => UserAddressGeo().fromJson(e)).toList() as M;
		}
		if(<UserCompany>[] is M){
			return data.map<UserCompany>((e) => UserCompany().fromJson(e)).toList() as M;
		}
		if(<PhotoEntity>[] is M){
			return data.map<PhotoEntity>((e) => PhotoEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}